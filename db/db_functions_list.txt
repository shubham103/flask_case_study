db.isUserExist(userId,password) -> true/false
db.isCustomerSsnidExist(ssnid) -> true/false
db.isCustomerIdExist(id) -> true/false
db.isAccountIdExist(aid): -- > true/false


db.createCustomer(ssnid,name,age, address, city, state) -> [true/false,error_msg] * eg [Ture , ""] or [False,"error message"]*
db.getCustomerSSnidDetils(ssnid) -> { all details in key:value pair}
db.updateCustomer(updateFields* ye dict. hai.. name and value of fields to be update*  )  -> [true/false,error_msg]  * eg [Ture , ""] or [False,"error message"]*

db.deleteCustomer(ssnid)   -->  [true/false,error_msg]  * eg [Ture , ""] or [False,"error message"]*

db.getCustomerDetails() --> { *SSN ID, Status, Last Updated*  these details of each customer; jsut give list of [ { dict.. key : value  pair}]} \\\\\\\\\\ in the form [true , [{data}]] or [false , error_mssg]



db.getAccountIdDetils(aid)--> { all details in key:value pair*customerId,accountId,accountType, balance *}

db.deleteAccount(aid) --> [true/false,error_msg]  * eg [Ture , ""] or [False,"error message"]*

db.getSsnidAccounts(ssnid) -> { list of account numbers of ssnid}

db.deposit(aid,damt) -> [true/false,error_msg]  * eg [Ture , ""] or [False,"error message"]*

db.withdraw(aid,wamt) -> [true/false,error_msg]  * eg [Ture , ""] or [False,"error message"]*

db.transfer(amount, SrcAid, TgtAid) -> [true/false,error_msg]  * eg [Ture , ""] or [False,"error message"]*

db.statementByNumber(aid,n) -> [ array of latest n statements ]
db.statementByDate(aid,sdate,edate) --> [ array of statements  used between  given dates]
    db.isAccountExist(SrcAid)
